#
# Strategy:
#   1. Make sure all nodes are having generated PUBLIC and PRIVATE keys
#   2. Generate configuration for each node by fetching PUBLIC keys from peers this node should connect to
#   3. Setup systemd service
#

- name: Install wireguard tools
  package:
      name: wireguard-tools
      state: present

- set_fact:
      wg_conf_path: "/etc/wireguard/{{ vpn.interface_name }}.conf"

- name: Check if keypair was already generated
  command: 'grep -q "PrivateKey" {{ wg_conf_path }}'
  register: keypair_presence
  check_mode: no
  ignore_errors: yes

- debug:
      var: "{{ keypair_presence.rc }}"

# First time it will create a private key and store it into the *.conf file
# So in next step that key could be re-readed (for consistency)
- name: Generate new keypair (if keypair was not already generated)
  when: keypair_presence.rc > 0
  block:
      - name: Generate private key
        register: privkey_gen
        shell: "wg genkey"

      - name: Write minimalist WireGuard template
        template:
            src: templates/minimal-wg.conf.j2
            dest: "{{ wg_conf_path }}"
            owner: root

- name: Read private key
  shell: |
      python3 -c "import configparser; c = configparser.ConfigParser(strict=False); c.read('/etc/wireguard/rkt161.conf'); print(c['Interface']['PrivateKey'])"
  register: private_key

- name: Retrieve private key
  set_fact:
      wg_private_key: "{{ private_key.stdout | trim }}"

- name: Extract public key
  register: public_key
  shell: 'echo "{{ wg_private_key }}" | wg pubkey'

- set_fact:
      wg_port: "51821"
  when: wg_port is not defined

- set_fact:
      wg_public_key: "{{ public_key.stdout }}"

# --------------------------------------------------------------------------------------
# At this stage every node should have populated facts with PUBLIC KEY and PRIVATE KEY
# so the template will iterate over the nodes and fetch required PUBLIC KEYS
# --------------------------------------------------------------------------------------
- name: Generate configuration
  template:
      src: templates/wg.conf.j2
      dest: "{{ wg_conf_path }}"
      owner: root

- name: Allow Wireguard on the firewall (UFW)
  ufw:
      rule: allow
      port: "{{ wg_port }}"

- name: Create, enable and start systemd service
  systemd:
      name: "wg-quick@{{ vpn.interface_name }}.service"
      daemon_reload: true
      enabled: true
      state: restarted
